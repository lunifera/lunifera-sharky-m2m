<beans xmlns="http://www.springframework.org/schema/beans" xmlns:amq="http://activemq.apache.org/schema/core"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

	<!-- The <broker> element is used to configure the ActiveMQ broker. -->
	<broker xmlns="http://activemq.apache.org/schema/core" brokerName="sharkyBroker" persistent="false" useJmx="true">

		<!-- For better performances use VM cursor and small memory limit. For more information, see: http://activemq.apache.org/message-cursors.html 
			Also, if your producer is "hanging", it's probably due to producer flow control. For more information, see: http://activemq.apache.org/producer-flow-control.html -->

		<destinationPolicy>
			<policyMap>
				<policyEntries>
					<policyEntry topic=">" producerFlowControl="true">
						<!-- The constantPendingMessageLimitStrategy is used to prevent slow topic consumers to block producers and affect 
							other consumers by limiting the number of messages that are retained For more information, see: http://activemq.apache.org/slow-consumer-handling.html -->
						<pendingMessageLimitStrategy>
							<constantPendingMessageLimitStrategy limit="1000" />
						</pendingMessageLimitStrategy>
					</policyEntry>
					<policyEntry queue=">" producerFlowControl="true" memoryLimit="1mb">
						<!-- Use VM cursor for better latency For more information, see: http://activemq.apache.org/message-cursors.html <pendingQueuePolicy> 
							<vmQueueCursor/> </pendingQueuePolicy> -->
					</policyEntry>
				</policyEntries>
			</policyMap>
		</destinationPolicy>

		<!-- The managementContext is used to configure how ActiveMQ is exposed in JMX. By default, ActiveMQ uses the MBean server 
			that is started by the JVM. For more information, see: http://activemq.apache.org/jmx.html -->
		<managementContext>
			<managementContext createConnector="false" />
		</managementContext>

		<!-- The systemUsage controls the maximum amount of space the broker will use before slowing down producers. For more information, 
			see: http://activemq.apache.org/producer-flow-control.html If using ActiveMQ embedded - the following limits could safely 
			be used: <systemUsage> <systemUsage> <memoryUsage> <memoryUsage limit="20 mb"/> </memoryUsage> <storeUsage> <storeUsage limit="1 
			gb"/> </storeUsage> <tempUsage> <tempUsage limit="100 mb"/> </tempUsage> </systemUsage> </systemUsage> -->
		<systemUsage>
			<systemUsage>
				<memoryUsage>
					<memoryUsage limit="64 mb" />
				</memoryUsage>
				<storeUsage>
					<storeUsage limit="100 gb" />
				</storeUsage>
				<tempUsage>
					<tempUsage limit="50 gb" />
				</tempUsage>
			</systemUsage>
		</systemUsage>

		<!-- The transport connectors expose ActiveMQ over a given protocol to clients and other brokers. For more information, 
			see: http://activemq.apache.org/configuring-transports.html -->
		<transportConnectors>
			<transportConnector name="mqtt" uri="mqtt://0.0.0.0:1883" />
		</transportConnectors>
	</broker>
</beans>